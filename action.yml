name: 'docker-swarm-deploy-github-action'
description: 'Deploy your Docker Swarm apps in seconds. ðŸš€'
inputs:
  docker_compose_file_path:
    description: 'Set your docker compose file path with the CLI options.'
    default: '-c docker-compose.yml -c docker-compose.prod.yml'
    required: false
  stack_name:
    description: 'The name of your Docker stack.'
    required: true
  deployment_ssh_private_key:
    description: 'The private key you have authenticated to connect to your server via SSH.'
    required: true
  remote_ssh_known_hosts:
    description: 'The public key of your SSH server to validate we are connecting to the right server.'
    default: ''
    required: false
  remote_ssh_deployment_user:
    description: 'The user that you would like to connect as on the remote server via SSH.'
    default: 'deploy'
    required: true
  remote_ssh_server_hostname:
    description: 'The hostname or IP address of the server you want to connect to.'
    required: true
  remote_ssh_port:
    description: 'The SSH port of the remote server you would like to connect to.'
    default: '22'
    required: false
  registry:
    description: 'Comma-separated list of container registries to authenticate with (e.g., "docker.io,ghcr.io").'
    default: 'docker.io' # Default to Docker Hub if not specified
    required: false
  registry-username:
    description: 'The username to use to authenticate with the container registry.'
    required: true
  registry-token:
    description: 'The token or password to use to authenticate with the container registry.'
    required: true
  log_level:
    description: 'The log level to use for the Docker CLI.'
    default: 'debug'

runs:
  using: 'composite'
  steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Prepare SSH configuration.
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
      shell: bash

    - name: Add SSH key.
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        echo "${{ inputs.deployment_ssh_private_key }}" | tr -d '\r' | ssh-add -
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      shell: bash

    - name: Use predefined SSH known hosts (if available).
      if: ${{ inputs.remote_ssh_known_hosts }}
      run: |
        echo "${{ inputs.remote_ssh_known_hosts }}" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
      shell: bash

    - name: Use SSH keyscan to get the public key of the remote server.
      if: ${{ inputs.remote_ssh_known_hosts }} = ''
      run: |
        echo "::warning::You may want to set REMOTE_SSH_KNOWN_HOSTS as a GitHub Actions secret to improve security."
        ssh-keyscan -p ${{inputs.remote_ssh_port}} -H ${{ inputs.remote_ssh_server_hostname }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
      shell: bash

    - name: Login to Docker Hub (if specified).
      if: contains(inputs.registry, 'docker.io')
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-token }}
        registry: docker.io

    - name: Login to GitHub Container Registry (if specified).
      if: contains(inputs.registry, 'ghcr.io')
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-token }}
        registry: ghcr.io

    - name: Run Docker Stack deployment via SSH.
      run: |
        docker --log-level ${{ inputs.log_level }} -H ssh://${{ inputs.remote_ssh_deployment_user }}@${{ inputs.remote_ssh_server_hostname }}:${{ inputs.remote_ssh_port }} \
          stack deploy --with-registry-auth \
          ${{ inputs.docker_compose_file_path }} \
          ${{ inputs.stack_name }} \
          --prune
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

branding:
  icon: 'zap'
  color: 'blue'
